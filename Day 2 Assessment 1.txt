D2P1

Problem Statement



You will be given an array of integers and a target value. Determine the number of pairs of array elements that have a difference equal to a target value.



For example, given an array of [1, 2, 3, 4] and a target value of 1, we have three values meeting the condition: 2-1 = 1, 3-2 = 1, and 4-3 = 1.



Function Description



Write a function pair. It must return an integer representing the number of element pairs having the required difference.



Pairs has the following parameter(s):

k: an integer, the target difference

arr: an array of integers

Input format :
The first line contains two space-separated integers n and k, the size of arr, and the target value.

The second line contains n space-separated integers of the array arr[I].

Output format :
The output displays an integer representing the number of element pairs from the array arr that have a difference of k.



Refer to the sample output for formatting specifications.

Code constraints :
1 ≤ n, k ≤ 10.

1 ≤ Arr[i] ≤ 100.

Sample test cases :
Input 1 :
4 1
1 2 3 4
Output 1 :
3
Input 2 :
5 2
1 5 3 4 2 
Output 2 :
3
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.


Solution



------------------------------------------------------------------------------------------------------------------------------------

D2P2

Problem Statement:



Given an array of integers nums and an integer sum, return the subarrays whose sum equals to sum.



A subarray is a contiguous non-empty sequence of elements within an array.



Example 1:

Input:

8 ----> n

3 4 -7 1 3 3 1 4 -----> nums

7 ------>sum

Output:

3 4 

3 4 -7 1 3 3 

1 3 3 

3 3 1 

Explanation: There are multiple subarrays whose elements sum up to 7.



Example 2:

Input:

8 -----> n

3 4 -7 1 3 3 1 4 -------> nums

0 -----> sum

Output:

3 4 -7 

-7 1 3 3 

Explanation: There are two subarrays whose elements sum up to 0.



Example 3:

Input:

8 ------> n

12 4 6 7 -1 6 4 1 ------> nums

8 ------> sum

Output:

No subarrays found

Explanation: There are no subarrays whose elements sum up to 8 in this array.

Input format :
The first line of input consists of an integer n representing the number of elements in the array.

The second line of input consists of n space-separated integers representing the array elements (nums).

The last line of input consists of an integer representing the sum(sum).

Output format :
The output displays the following format:



If there are subarrays whose sum equals sum, each line contains the elements of one such subarray separated by a space.

If no subarrays are found, output "No subarrays found".



Refer to the sample output for formatting specifications.

Code constraints :
3 ≤ n ≤ 25.

-100 ≤ nums ≤ 500

0 ≤ sum ≤ 200

Sample test cases :
Input 1 :
8
3 4 -7 1 3 3 1 4
7
Output 1 :
3 4 
3 4 -7 1 3 3 
1 3 3 
3 3 1 
Input 2 :
8
3 4 -7 1 3 3 1 4
0
Output 2 :
3 4 -7 
-7 1 3 3 
Input 3 :
8
12 4 6 7 -1 6 4 1
8
Output 3 :
No subarrays found
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.


Solution

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        
        int targetSum = sc.nextInt();
        boolean found = false;

        for (int start = 0; start < n; start++) {
            int currentSum = 0;
            StringBuilder subarray = new StringBuilder();
            for (int end = start; end < n; end++) {
                currentSum += nums[end];
                subarray.append(nums[end]).append(" ");
                
                if (currentSum == targetSum) {
                    System.out.println(subarray.toString().trim());
                    found = true;
                }
            }
        }
        
        if (!found) {
            System.out.println("No subarrays found");
        }
        
        sc.close();
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D3P3

Problem Statement:



Given an array of integers nums and an integer sum, return the subarrays whose sum equals to sum.



A subarray is a contiguous non-empty sequence of elements within an array.



Example 1:

Input:

8 ----> n

3 4 -7 1 3 3 1 4 -----> nums

7 ------>sum

Output:

3 4 

3 4 -7 1 3 3 

1 3 3 

3 3 1 

Explanation: There are multiple subarrays whose elements sum up to 7.



Example 2:

Input:

8 -----> n

3 4 -7 1 3 3 1 4 -------> nums

0 -----> sum

Output:

3 4 -7 

-7 1 3 3 

Explanation: There are two subarrays whose elements sum up to 0.



Example 3:

Input:

8 ------> n

12 4 6 7 -1 6 4 1 ------> nums

8 ------> sum

Output:

No subarrays found

Explanation: There are no subarrays whose elements sum up to 8 in this array.

Input format :
The first line of input consists of an integer n representing the number of elements in the array.

The second line of input consists of n space-separated integers representing the array elements (nums).

The last line of input consists of an integer representing the sum(sum).

Output format :
The output displays the following format:



If there are subarrays whose sum equals sum, each line contains the elements of one such subarray separated by a space.

If no subarrays are found, output "No subarrays found".



Refer to the sample output for formatting specifications.

Code constraints :
3 ≤ n ≤ 25.

-100 ≤ nums ≤ 500

0 ≤ sum ≤ 200

Sample test cases :
Input 1 :
8
3 4 -7 1 3 3 1 4
7
Output 1 :
3 4 
3 4 -7 1 3 3 
1 3 3 
3 3 1 
Input 2 :
8
3 4 -7 1 3 3 1 4
0
Output 2 :
3 4 -7 
-7 1 3 3 
Input 3 :
8
12 4 6 7 -1 6 4 1
8
Output 3 :
No subarrays found
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.


Solution

import java.util.HashSet;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int m = scanner.nextInt();
        int[] arr1 = new int[m];
        for (int i = 0; i < m; i++) {
            arr1[i] = scanner.nextInt();
        }
        
        int n = scanner.nextInt();
        int[] arr2 = new int[n];
        for (int i = 0; i < n; i++) {
            arr2[i] = scanner.nextInt();
        }
        
        HashSet<Integer> set = new HashSet<>();
        for (int num : arr1) {
            set.add(num);
        }
        
        boolean isSubset = true;
        for (int num : arr2) {
            if (!set.contains(num)) {
                isSubset = false;
                break;
            }
        }
        
        if (isSubset) {
            System.out.println("arr2[] is subset of arr1[]");
        } else {
            System.out.println("arr2[] is not a subset of arr1[]");
        }
        
        scanner.close();
    }
}

------------------------------------------------------------------------------------------------------------------------------------

