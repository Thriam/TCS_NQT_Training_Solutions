D2P1


Problem Statement



Given a sentence, the task is to remove spaces from the sentence and rewrite it in camel case. It is a style of writing where we don’t have spaces and all words begin with capital letters.



Examples



Input: I got to intern at iamNeo

Output: IGotToInternAtIamNeo



Input: Here comes the garden

Output: HereComesTheGarden

Input format :
The input consists of a string s containing lowercase and uppercase English letters and spaces.

Output format :
The output prints the modified string where each word in the string starts with an uppercase letter, and all spaces are removed.



Refer to the sample output for formatting specifications.

Code constraints :
The maximum length of the input string is 300.

Sample test cases :
Input 1 :
I got to intern at iamNeo
Output 1 :
IGotToInternAtIamNeo
Input 2 :
Here comes the garden
Output 2 :
HereComesTheGarden
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine().trim();
        String[] words = input.split("\\s+");
        StringBuilder camelCaseString = new StringBuilder();
        for (String word : words) {
            camelCaseString.append(Character.toUpperCase(word.charAt(0)));
            camelCaseString.append(word.substring(1));
        }
        System.out.println(camelCaseString.toString());
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P2

Problem Statement



You are given a string. Using a recursive function, you have to obtain different combinations of the string or in other words permutations of the given string and all the sub-strings in alphabetical order.



Note: The characters within the sub-string can be repeated.



Example



Input:

ABC



﻿Output:

AAA AAB AAC ABA ABB ABC ACA ACB ACC BAA BAB BAC BBA BBB BBC BCA BCB BCC CAA CAB CAC CBA CBB CBC CCA CCB CCC 

Input format :
The input consists of a string.

Output format :
The output prints the list of permuted strings, separated by a space.



Refer to the sample output for formatting specifications.

Code constraints :
The input consists of uppercase characters and a maximum length of 4 characters.

Sample test cases :
Input 1 :
BD
Output 1 :
BB BD DB DD 
Input 2 :
ABC
Output 2 :
AAA AAB AAC ABA ABB ABC ACA ACB ACC BAA BAB BAC BBA BBB BBC BCA BCB BCC CAA CAB CAC CBA CBB CBC CCA CCB CCC 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.*;

public class Main {
    private static Set<String> results = new TreeSet<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        generateCombinations(input, "", input.length());
        System.out.println(String.join(" ", results));
    }

    private static void generateCombinations(String input, String current, int length) {
        if (current.length() == length) {
            results.add(current);
            return;
        }
        for (char c : input.toCharArray()) {
            generateCombinations(input, current + c, length);
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D1P3

Problem Statement



Given two strings, s, and t, the task is to find the maximum length of some prefix of the string s that occurs in string t as a subsequence.



Example



Input: 

s = "digger"

t = "biggerdiagram"

Output: 

3

Explanation: 

Prefix "dig" of s is the longest subsequence in t.

Input format :
The first line input consists of a string, representing s.

The second line of string consists of a string representing t.

Output format :
The output displays the maximum length of subsequence found in t.



Refer to the sample output for formatting specifications.

Code constraints :
Strings s and t consist of alphabetical characters (a-z) with lengths ranging from 1 to 1000 characters.

Sample test cases :
Input 1 :
digger
biggerdiagram
Output 1 :
3
Input 2 :
iamneo
abcidfaiimon
Output 2 :
4
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = scanner.nextLine();
        System.out.println(maxPrefixSubsequenceLength(s, t));
    }

    private static int maxPrefixSubsequenceLength(String s, String t) {
        int maxLength = 0;
        int sLength = s.length();
        int tLength = t.length();
        
        int j = 0; // Pointer for string t
        for (int i = 0; i < sLength; i++) {
            while (j < tLength && t.charAt(j) != s.charAt(i)) {
                j++;
            }
            if (j == tLength) {
                break; // Reached the end of t without finding s[i]
            }
            maxLength++;
            j++; // Move to the next character in t
        }
        
        return maxLength;
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P4

Problem Statement



Given a string s, find the length of the longest substring without repeating characters.



Example 1:

Input: s = "abcabcbb"

Output: 3

Explanation: The answer is "abc", with a length of 3.



Example 2:

Input: s = "bbbbb"

Output: 1

Explanation: The answer is "b", with a length of 1.     



Example 3:

Input: s = "pwwkew"

Output: 3

Explanation: The answer is "wke", with a length of 3.

Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.                                                                                                        

Input format :
The input consists of a string s.

Output format :
The output prints the length of the longest substring without repeating characters.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ s.length ≤ 100

Sample test cases :
Input 1 :
abcabcbb
Output 1 :
3
Input 2 :
bbbb
Output 2 :
1
Input 3 :
pwwkew
Output 3 :
3
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.HashSet;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        System.out.println(lengthOfLongestSubstring(s));
    }

    private static int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int maxLength = 0;
        int left = 0;

        for (int right = 0; right < s.length(); right++) {
            while (set.contains(s.charAt(right))) {
                set.remove(s.charAt(left));
                left++;
            }
            set.add(s.charAt(right));
            maxLength = Math.max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P5

Problem Statement



Given a string s, find the length of the longest substring without repeating characters.



Example 1:

Input: s = "abcabcbb"

Output: 3

Explanation: The answer is "abc", with a length of 3.



Example 2:

Input: s = "bbbbb"

Output: 1

Explanation: The answer is "b", with a length of 1.     



Example 3:

Input: s = "pwwkew"

Output: 3

Explanation: The answer is "wke", with a length of 3.

Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.                                                                                                        

Input format :
The input consists of a string s.

Output format :
The output prints the length of the longest substring without repeating characters.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ s.length ≤ 100

Sample test cases :
Input 1 :
abcabcbb
Output 1 :
3
Input 2 :
bbbb
Output 2 :
1
Input 3 :
pwwkew
Output 3 :
3
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

// You are using Java
import java.util.Scanner;

public class Main {
    
    static void PrintMinNumberForPattern(String arr) {
        int curr_max = 0;
        int last_entry = 0;
        int j;

        for (int i = 0; i < arr.length(); i++) {
            int noOfNextD = 0;

            switch (arr.charAt(i)) {
                case 'I':
                    j = i + 1;
                    while (j < arr.length() && arr.charAt(j) == 'D') {
                        noOfNextD++;
                        j++;
                    }

                    if (i == 0) {
                        curr_max = noOfNextD + 2;
                        System.out.print(++last_entry + " " + curr_max);
                        last_entry = curr_max;
                    } else {
                        curr_max = curr_max + noOfNextD + 1;
                        last_entry = curr_max;
                        System.out.print(" " + last_entry);
                    }

                    for (int k = 0; k < noOfNextD; k++) {
                        System.out.print(" " + --last_entry);
                        i++;
                    }
                    break;

                case 'D':
                    if (i == 0) {
                        j = i + 1;
                        while (j < arr.length() && arr.charAt(j) == 'D') {
                            noOfNextD++;
                            j++;
                        }

                        curr_max = noOfNextD + 2;
                        System.out.print(curr_max + " " + (curr_max - 1));
                        last_entry = curr_max - 1;
                    } else {
                        System.out.print(" " + (last_entry - 1));
                        last_entry--;
                    }
                    break;
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String pattern = scanner.nextLine();
        PrintMinNumberForPattern(pattern);
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P6

Problem Statement



Have the function BracketCombinations(num) read num which will be an integer greater than or equal to zero, and return the number of valid combinations that can be formed with num pairs of parentheses.



For example, if the input is 3, then the possible combinations of 3 pairs of parenthesis, namely: ()()(), are ()()(), ()(()), (())(), ((())), and (()()). There are 5 total combinations when the input is 3, so your program should return 5.

Input format :
The input consists of a single integer n, representing the number of pairs of brackets.

Output format :
The output displays a single integer representing the number of possible combinations of well-formed bracket sequences.



Refer to the sample output for the formatting specifications.

Code constraints :
0 ≤ n ≤ 8

Sample test cases :
Input 1 :
3
Output 1 :
5
Input 2 :
2
Output 2 :
2
Input 3 :
0
Output 3 :
1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

// You are using Java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println(BracketCombinations(n));
    }

    static int BracketCombinations(int num) {
        if (num == 0) return 1;

        int[] dp = new int[num + 1];
        dp[0] = 1;

        for (int i = 1; i <= num; i++) {
            for (int j = 0; j < i; j++) {
                dp[i] += dp[j] * dp[i - 1 - j];
            }
        }
        return dp[num];
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P7

Problem Statement



Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.



Note that the same word in the dictionary may be reused multiple times in the segmentation.



Example 1:

Input: s = "applepenapple", wordDict = ["apple","pen"]

Output: true

Explanation: Return true because "applepenapple" can be segmented as "apple pen apple". Note that you are allowed to reuse a dictionary word.



Example 2:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]

Output: false

Input format :
The first line of input consists of a string s, representing the input string.

The second line consists of an integer n, indicating the number of words in the dictionary.

The next line consists of n space-separated strings representing the words of the dictionary.

Output format :
If the input string can be segmented into words from the dictionary, output "true".

If the input string cannot be segmented into words from the dictionary, output "false".



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ s.length ≤ 100

1 ≤ wordDict.length ≤ 10

1 ≤ wordDict[i].length ≤ 100

s and wordDict[i] consist of only lowercase English letters.

All the strings of wordDict are unique.

Sample test cases :
Input 1 :
applepenapple
2
apple pen
Output 1 :
true
Input 2 :
catsandog
5
cats dog sand and cat
Output 2 :
false
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.HashSet;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int n = scanner.nextInt();
        scanner.nextLine();  // Consume the newline character
        String[] wordDict = scanner.nextLine().split(" ");

        System.out.println(wordBreak(s, new HashSet<>(java.util.Arrays.asList(wordDict))));
    }

    private static boolean wordBreak(String s, HashSet<String> wordDict) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;

        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[s.length()];
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P8

Problem Statement



﻿We have given Ankit an input string, s, and a target string, t. The strings will have lengths - lenS, and lenT respectively. He has to find the smallest subset in the input string that contains all the elements in the target. If he fails to do so, he must return null.



Example1



Input:

sajkfhk

hjk



Output:

Smallest subset: jkfh



Explanation:

Since the target value is hjk, the smallest subset containing these characters is jkfh.



Example2



Input:

sajkab

hjk



Output:

Smallest subset: null



Explanation:

﻿Since the target value is hjk, the smallest subset does not contain all these elements. Thus, it returns null.

Input format :
The first line of input consists of a string, S.

The second line of input consists of a string, T.

Output format :
The output displays "Smallest subset: " followed by the smallest subset.



Refer to the sample output for formatting specifications.

Code constraints :
The strings contain lowercase characters.

1 ≤ lenS ≤ 20

1 ≤ lenT ≤ 10

Sample test cases :
Input 1 :
sajkfhk
hjk
Output 1 :
Smallest subset: jkfh
Input 2 :
sajkab
hjk
Output 2 :
Smallest subset: null
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = scanner.nextLine();

        String result = smallestSubset(s, t);
        if (result == null) {
            System.out.println("Smallest subset: null");
        } else {
            System.out.println("Smallest subset: " + result);
        }
    }

    private static String smallestSubset(String s, String t) {
        Map<Character, Integer> targetCount = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetCount.put(c, targetCount.getOrDefault(c, 0) + 1);
        }

        int left = 0, right = 0, minLength = Integer.MAX_VALUE, minLeft = 0;
        int required = targetCount.size();
        int formed = 0;
        Map<Character, Integer> windowCount = new HashMap<>();

        while (right < s.length()) {
            char c = s.charAt(right);
            windowCount.put(c, windowCount.getOrDefault(c, 0) + 1);

            if (targetCount.containsKey(c) && windowCount.get(c).intValue() == targetCount.get(c).intValue()) {
                formed++;
            }

            while (left <= right && formed == required) {
                c = s.charAt(left);
                if (right - left + 1 < minLength) {
                    minLength = right - left + 1;
                    minLeft = left;
                }

                windowCount.put(c, windowCount.get(c) - 1);
                if (targetCount.containsKey(c) && windowCount.get(c).intValue() < targetCount.get(c).intValue()) {
                    formed--;
                }
                left++;
            }
            right++;
        }

        return minLength == Integer.MAX_VALUE ? null : s.substring(minLeft, minLeft + minLength);
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P9

Problem Statement



Given an array of strings strs, group the anagrams together. You can return the answer in any order.



An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.



Example:

Input: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]

Output: [["bat"],["nat", "tan"],["ate", "eat", "tea"]]                            

Input format :
The first line consists of an integer n, representing the number of strings.

The second line consists of n space-separated strings, represented as strs.

Output format :
The output prints grouped anagrams, where each group is present in a separate line, and inside each group, the anagrams are separated by a space.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ strs.length (n) ≤ 20

1 ≤ strs[i].length ≤ 30

strs[i] consists of lowercase English letters.

Sample test cases :
Input 1 :
6
eat tea tan ate nat bat
Output 1 :
bat 
tan nat 
eat tea ate 
Input 2 :
2
ab nj
Output 2 :
nj 
ab 
Input 3 :
3
abc cba cab
Output 3 :
abc cba cab 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();  // Consume the newline character
        String[] strs = scanner.nextLine().split(" ");

        List<List<String>> result = groupAnagrams(strs);
        
        // Reverse print the groups
        for (int i = result.size() - 1; i >= 0; i--) {
            System.out.println(String.join(" ", result.get(i)));
        }
    }

    private static List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> anagramMap = new LinkedHashMap<>();

        for (String str : strs) {
            char[] charArray = str.toCharArray();
            java.util.Arrays.sort(charArray);
            String sortedStr = new String(charArray);

            anagramMap.putIfAbsent(sortedStr, new ArrayList<>());
            anagramMap.get(sortedStr).add(str);
        }

        return new ArrayList<>(anagramMap.values());
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P10

Problem Statement



Bob loves playing a string-matching game where he tries to match two strings based on a specific pattern. In this game, players input two strings, and the game determines whether they match according to a set of rules. Here are the rules of the game:



A '*' in the first string represents zero or more characters.
A '?' in the first string represents exactly one character.
Any other character in the first string must match the corresponding character in the second string.


Bob has requested your assistance in completing the game mentioned above.

Input format :
The first line of input consists of a string str1 containing the characters along with the symbols - ? and *.

The second line consists of the string str2, without any symbols.

Output format :
The first line displays "Second string: " followed by str2 as string, representing the second input string.

The second line displays the following format:

"The strings match" if the first string matches the second according to the pattern rules.
"The strings do not match" if the first string does not match the second according to the pattern rules.


Refer to the sample output for the formatting specifications.

Code constraints :
2 ≤ length of the strings ≤ 50

The strings contain lower-case and upper-case letters and are case-sensitive.

Sample test cases :
Input 1 :
i?mneo
iamneo
Output 1 :
Second string: iamneo
The strings match
Input 2 :
i?m
iaam
Output 2 :
Second string: iaam
The strings do not match
Input 3 :
i*mn?o
iaamneo
Output 3 :
Second string: iaamneo
The strings match
Input 4 :
a?b?c?d?e?f?gh
axbxcydzefffgh
Output 4 :
Second string: axbxcydzefffgh
The strings match
Input 5 :
A*c
ac
Output 5 :
Second string: ac
The strings do not match
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String str1 = scanner.nextLine();
        String str2 = scanner.nextLine();

        System.out.println("Second string: " + str2);
        if (isMatch(str1, str2)) {
            System.out.println("The strings match");
        } else {
            System.out.println("The strings do not match");
        }
    }

    private static boolean isMatch(String pattern, String str) {
        int pLen = pattern.length();
        int sLen = str.length();
        int pIndex = 0, sIndex = 0;
        int starIndex = -1, matchIndex = 0;

        while (sIndex < sLen) {
            if (pIndex < pLen && (pattern.charAt(pIndex) == str.charAt(sIndex) || pattern.charAt(pIndex) == '?')) {
                pIndex++;
                sIndex++;
            } else if (pIndex < pLen && pattern.charAt(pIndex) == '*') {
                starIndex = pIndex;
                matchIndex = sIndex;
                pIndex++;
            } else if (starIndex != -1) {
                pIndex = starIndex + 1;
                sIndex = matchIndex + 1;
                matchIndex++;
            } else {
                return false;
            }
        }

        while (pIndex < pLen && pattern.charAt(pIndex) == '*') {
            pIndex++;
        }

        return pIndex == pLen;
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P11

Problem Statement



Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.



Example 1:

Input: s = "bcabc"

Output: "abc"



Example 2:

Input: s = "cbacdcbc"

Output: "acdb"

Input format :
The first line of input consists of a string s, representing the input string.

The second line consists of an integer n, indicating the number of words in the dictionary.

The next line consists of n space-separated strings representing the words of the dictionary.

Output format :
If the input string can be segmented into words from the dictionary, output "true".

If the input string cannot be segmented into words from the dictionary, output "false".



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ s.length ≤ 100

s consists of only lowercase English letters.

Sample test cases :
Input 1 :
bcabc
Output 1 :
abc
Input 2 :
cbacdcbc
Output 2 :
acdb
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        
        System.out.println(removeDuplicateLetters(s));
    }

    private static String removeDuplicateLetters(String s) {
        int[] lastOccurrence = new int[26];
        boolean[] inStack = new boolean[26];
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            lastOccurrence[s.charAt(i) - 'a'] = i;
        }

        for (int i = 0; i < s.length(); i++) {
            char currentChar = s.charAt(i);
            if (inStack[currentChar - 'a']) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > currentChar && lastOccurrence[stack.peek() - 'a'] > i) {
                inStack[stack.pop() - 'a'] = false;
            }
            stack.push(currentChar);
            inStack[currentChar - 'a'] = true;
        }

        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }
        
        return result.reverse().toString();
    }
}

------------------------------------------------------------------------------------------------------------------------------------

D2P12

Problem Statement



Jin is working on a string manipulation problem. He needs to replace all occurrences of a specified pattern within a given word with a specified character. 



Write a program to help Jin achieve this task efficiently.



Example



Input:

ABCABCXABCabc

ABC

#

Output:

##X#abc

Explanation:

After replacing occurrences of the pattern ABC with #, the resultant string becomes ##X#abc.

Input format :
The first line of input consists of the original word as a string.

The second line consists of the pattern as a string.

The third line consists of the character that will replace occurrences of the pattern.

Output format :
The output prints a string representing the modified word after replacing occurrences of the pattern with the specified character.



Refer to the sample output for formatting specifications.

Code constraints :
The length of the word is at most 200 characters.

The strings are case sensitive.

Sample test cases :
Input 1 :
ABCABCXABCabc
ABC
#
Output 1 :
##X#abc
Input 2 :
abxgyuabx
abx
5
Output 2 :
5gyu5
Input 3 :
ABXVYUABXE
ABX
C
Output 3 :
CVYUCE
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.

Solution

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String originalWord = scanner.nextLine();
        String pattern = scanner.nextLine();
        String replacement = scanner.nextLine();

        String modifiedWord = originalWord.replace(pattern, replacement);
        System.out.println(modifiedWord);
    }
}

------------------------------------------------------------------------------------------------------------------------------------